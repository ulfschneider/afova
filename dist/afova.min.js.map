{"version":3,"file":"afova.min.js","sources":["../src/afova.ts","../node_modules/nanoid/index.browser.js","../node_modules/nanoid/url-alphabet/index.js"],"sourcesContent":["import { nanoid } from \"nanoid\";\nimport constraint_violation_messages_en from \"./locale/en.json\";\nimport constraint_violation_messages_de from \"./locale/de.json\";\n\nexport interface AfovaSettings {\n  selector?: string;\n  validateOnChange?: boolean;\n  focusOnFirstError?: boolean;\n}\n\nconst INPUT_TYPES = [\n  \"text\",\n  \"email\",\n  \"datetime-local\",\n  \"file\",\n  \"image\",\n  \"month\",\n  \"number\",\n  \"password\",\n  \"range\",\n  \"search\",\n  \"tel\",\n  \"time\",\n  \"url\",\n  \"week\",\n] as const;\n\nconst CONSTRAINTS = [\n  \"required\",\n  \"pattern\",\n  \"max\",\n  \"min\",\n  \"step\",\n  \"maxlength\",\n  \"minlength\",\n  \"type\",\n] as const;\n\nconst CONSTRAINT_VIOLATIONS = [\n  \"badInput\",\n  \"customError\",\n  \"patternMismatch\",\n  \"rangeOverflow\",\n  \"rangeUnderflow\",\n  \"stepMismatch\",\n  \"tooLong\",\n  \"tooShort\",\n  \"typeMismatch\",\n  \"valueMissing\",\n] as const;\n\nexport type InputType = (typeof INPUT_TYPES)[number];\n\nexport type Constraint = (typeof CONSTRAINTS)[number];\n\nexport type ConstraintViolation = (typeof CONSTRAINT_VIOLATIONS)[number];\n\nexport interface ConstraintViolationMessage extends Record<InputType, string> {\n  message: string;\n  constraint?: Constraint;\n}\n\nexport type AfovaConstraintViolationMessages = Record<\n  ConstraintViolation,\n  ConstraintViolationMessage\n>;\n\nexport interface AfovaI18NConstraintViolationMessages {\n  [key: string]: AfovaConstraintViolationMessages;\n}\n\nexport interface AfovaObject {\n  clear: () => void;\n  isInvalid: () => boolean;\n  validate: () => void;\n}\n\nconst DEFAULT_SETTINGS: AfovaSettings = {\n  selector: \"form\",\n  validateOnChange: false,\n  focusOnFirstError: true,\n};\n\nconst I18N_CONSTRAINTS: AfovaI18NConstraintViolationMessages = {\n  en: constraint_violation_messages_en as unknown as AfovaConstraintViolationMessages,\n  de: constraint_violation_messages_de as unknown as AfovaConstraintViolationMessages,\n};\n\nconst IGNORE_CONTROL_TYPES = [\"submit\", \"reset\", \"button\"];\n\nfunction getConstraints(): AfovaConstraintViolationMessages {\n  let locale = navigator.language;\n  let constraints = I18N_CONSTRAINTS[locale];\n  if (constraints) {\n    console.log(`afova is using locale=[${locale}]`);\n    return constraints;\n  }\n\n  //extract language\n  const idx = locale.indexOf(\"-\");\n  if (idx) {\n    locale = locale.substring(0, idx);\n    if (locale) {\n      constraints = I18N_CONSTRAINTS[locale];\n    }\n  }\n\n  if (constraints) {\n    console.log(`afova is using language=[${locale}]`);\n    return constraints;\n  } else {\n    console.log(`afova is using language=[en]`);\n    return I18N_CONSTRAINTS.en;\n  }\n}\n\n/**\n * Create an afova object and initialize it for forms that are identified by the selector given in the options.\n * Will register event listeners on the form and the input controls of the form.\n * @param options settings for afova, optional\n */\nexport function afova(options?: AfovaSettings): AfovaObject {\n  let constraintViolationMessages: AfovaConstraintViolationMessages =\n    getConstraints();\n\n  function _ensureId(element: Element): void {\n    if (!element.id) {\n      element.id = `afova-${nanoid()}`;\n    }\n  }\n\n  function _findMessageContainer(control: HTMLObjectElement): Element | null {\n    const messageContainer = document.querySelector(\n      `#${control.id}-afova-message-container`,\n    );\n    return messageContainer;\n  }\n\n  function _ensureAndGetMessageContainer(control: HTMLObjectElement): Element {\n    let messageContainer = _findMessageContainer(control);\n    if (!messageContainer) {\n      messageContainer = document.createElement(\"ul\");\n      control.parentNode?.insertBefore(messageContainer, control);\n      messageContainer.id = `${control.id}-afova-message-container`;\n      messageContainer.classList.add(\"afova-message-container\");\n      control.setAttribute(\"aria-errormessage\", messageContainer.id);\n    }\n\n    return messageContainer;\n  }\n\n  function _deriveMessageText(\n    violation: ConstraintViolation,\n    control: HTMLObjectElement,\n  ): string {\n    if (violation != \"customError\") {\n      let defaultMessage = constraintViolationMessages[violation];\n\n      if (defaultMessage) {\n        let constraint = defaultMessage.constraint;\n\n        let message =\n          //a message defined for the control has highest prio\n          control.dataset[constraint || violation] ||\n          //a default message specific for the input type has second hightest prio\n          constraintViolationMessages[violation][control.type as InputType] ||\n          //a default message has last prio\n          defaultMessage.message;\n\n        const constraintValue = control.getAttribute(constraint || \"\");\n        if (constraintValue) {\n          const regex = new RegExp(`\\{\\{\\\\s*constraint\\\\s*\\}\\}`, \"ig\");\n          message = message.replace(regex, constraintValue);\n        }\n\n        return message;\n      }\n    }\n    return control.validationMessage;\n  }\n\n  function _putMessage(control: HTMLObjectElement): void {\n    const messageContainer = _ensureAndGetMessageContainer(control);\n\n    const validity = control.validity;\n    const messageElement = document.createElement(\"li\");\n    messageElement.classList.add(\"afova-message\");\n    messageContainer.appendChild(messageElement);\n\n    for (const violation of CONSTRAINT_VIOLATIONS) {\n      if ((validity as any)[violation]) {\n        //there is an error of type constraint\n        let message = _deriveMessageText(\n          violation as ConstraintViolation,\n          control,\n        );\n        if (message) {\n          messageElement.innerHTML = message;\n        }\n        break;\n      }\n    }\n\n    if (!messageElement.innerHTML) {\n      messageElement.innerHTML =\n        control.dataset.errorInvalid ||\n        constraintViolationMessages.badInput.message;\n    }\n  }\n\n  function _clearControlMessages(control: HTMLObjectElement): void {\n    control.removeAttribute(\"aria-invalid\");\n    control.removeAttribute(\"aria-errormessage\");\n\n    const messageContainer = _findMessageContainer(control);\n    if (messageContainer) {\n      messageContainer.remove();\n    }\n\n    let context = _getContext(control);\n    if (context) {\n      context.classList.remove(\"afova-active\");\n    }\n  }\n\n  function _setControlMessage(\n    control: HTMLObjectElement,\n    focus?: boolean,\n  ): void {\n    const context = _getContext(control);\n    if (context) {\n      context.classList.add(\"afova-active\");\n    }\n    control.setAttribute(\"aria-invalid\", \"true\");\n\n    _putMessage(control);\n\n    if (focus) {\n      control.focus();\n    }\n  }\n\n  function _validateControl(\n    control: HTMLObjectElement,\n    focus?: boolean,\n  ): boolean {\n    _clearControlMessages(control);\n    if (!control.validity.valid) {\n      _setControlMessage(control, focus);\n    }\n    return control.validity.valid;\n  }\n\n  function _getFormElements(form: HTMLFormElement): HTMLObjectElement[] {\n    const result: HTMLObjectElement[] = [];\n    for (const control of form.elements) {\n      if (!IGNORE_CONTROL_TYPES.includes((control as HTMLObjectElement).type)) {\n        result.push(control as HTMLObjectElement);\n      }\n    }\n    return result;\n  }\n\n  function _validateForm(form: HTMLFormElement, event?: Event): void {\n    let firstError: HTMLObjectElement | undefined;\n    for (const control of _getFormElements(form)) {\n      const valid = _validateControl(control);\n      if (!firstError && !valid) {\n        firstError = control;\n      }\n    }\n    if (firstError) {\n      event?.preventDefault();\n      if (settings.focusOnFirstError) {\n        firstError.focus();\n      }\n    }\n  }\n\n  function _resetForm(form: HTMLFormElement): void {\n    for (let control of _getFormElements(form)) {\n      _clearControlMessages(control);\n    }\n  }\n\n  function _prepareForms(): void {\n    const forms = document.querySelectorAll(settings.selector || \"form\");\n    for (const form of forms) {\n      //switch off default browser form validation\n      form.setAttribute(\"novalidate\", \"\");\n\n      _ensureId(form);\n\n      form.addEventListener(\"submit\", _formSubmitListener);\n      form.addEventListener(\"reset\", _formResetListener);\n      for (const control of _getFormElements(form as HTMLFormElement)) {\n        _prepareControl(control);\n      }\n    }\n  }\n\n  function _formSubmitListener(event: Event): void {\n    _validateForm(event.target as HTMLFormElement, event);\n  }\n\n  function _formResetListener(event: Event): void {\n    _resetForm(event.target as HTMLFormElement);\n  }\n\n  function _unprepareForms(): void {\n    const forms = document.querySelectorAll(settings.selector || \"form\");\n    for (const form of forms) {\n      form.removeAttribute(\"novalidate\");\n      form.removeEventListener(\"submit\", _formSubmitListener);\n      form.removeEventListener(\"reset\", _formResetListener);\n\n      for (const control of _getFormElements(form as HTMLFormElement)) {\n        _unprepareControl(control);\n      }\n    }\n  }\n\n  function _prepareControl(control: HTMLObjectElement): void {\n    _ensureId(control);\n    _getContext(control);\n    control.classList.add(\"afova-control\");\n    if (settings.validateOnChange) {\n      control.addEventListener(\"change\", _controlChangeListener);\n    }\n  }\n\n  function _controlChangeListener(event: Event): void {\n    _validateControl(event.target as HTMLObjectElement, true);\n  }\n\n  function _unprepareControl(control: HTMLObjectElement): void {\n    control.classList.remove(\"afova-control\");\n    control.removeEventListener(\"change\", _controlChangeListener);\n  }\n\n  /**\n   * Find the wrapping afova context for a form control by searching the parents.\n   * The context must be a label or a container with tje CSS class afova-context assigned.\n   * @param control the form control to start from\n   * @returns the wrapping context or null\n   */\n  function _getContext(control: HTMLElement): Element | null {\n    let context = control.closest(\".afova-context\");\n\n    if (!context) {\n      context = control.closest(\"label\");\n    }\n\n    if (context) {\n      context.classList.add(\"afova-context\");\n      if (\n        context.tagName == \"LABEL\" &&\n        !(context as HTMLLabelElement).htmlFor\n      ) {\n        (context as HTMLLabelElement).htmlFor = control.id;\n      }\n    }\n\n    return context;\n  }\n\n  function _validate(): void {\n    const forms = document.querySelectorAll(settings.selector || \"form\");\n    for (const form of forms) {\n      _validateForm(form as HTMLFormElement);\n    }\n  }\n\n  function _isInvalid(): boolean {\n    const forms = document.querySelectorAll(settings.selector || \"form\");\n    for (const form of forms) {\n      if (!(form as HTMLFormElement).checkValidity()) {\n        //form has invalid controls\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  let settings = Object.assign({}, DEFAULT_SETTINGS, options);\n  _prepareForms();\n\n  return {\n    /**\n     * Will remove all event listeners that have been added by afova and\n     * will clear all afova messages.\n     */\n    clear: () => _unprepareForms(),\n\n    /**\n    * Trigger the validation. In most cases not required, as afova will trigger\n     the validation automatically when submitting any of the selected forms.\n    */\n    validate: () => _validate(),\n\n    /**\n     * Verify if any of the forms selected according to the settings object is invalid\n     * @returns true if at least one form is invalid\n     */\n    isInvalid: () => _isInvalid(),\n  };\n}\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << Math.log2(alphabet.length - 1)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n"],"names":["CONSTRAINT_VIOLATIONS","DEFAULT_SETTINGS","selector","validateOnChange","focusOnFirstError","I18N_CONSTRAINTS","en","de","IGNORE_CONTROL_TYPES","options","constraintViolationMessages","locale","navigator","language","constraints","console","log","idx","indexOf","substring","getConstraints","_ensureId","element","id","size","bytes","crypto","getRandomValues","Uint8Array","nanoid","_findMessageContainer","control","document","querySelector","_deriveMessageText","violation","defaultMessage","constraint","message","dataset","type","constraintValue","getAttribute","regex","RegExp","replace","validationMessage","_putMessage","messageContainer","createElement","_a","parentNode","insertBefore","classList","add","setAttribute","_ensureAndGetMessageContainer","validity","messageElement","appendChild","innerHTML","errorInvalid","badInput","_clearControlMessages","removeAttribute","remove","context","_getContext","_validateControl","focus","valid","_setControlMessage","_getFormElements","form","result","elements","includes","push","_validateForm","event","firstError","preventDefault","settings","_formSubmitListener","target","_formResetListener","_resetForm","_prepareControl","addEventListener","_controlChangeListener","_unprepareControl","removeEventListener","closest","tagName","htmlFor","Object","assign","forms","querySelectorAll","_prepareForms","clear","_unprepareForms","validate","_validate","isInvalid","checkValidity","_isInvalid"],"mappings":"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","x_google_ignoreList":[1,2]}