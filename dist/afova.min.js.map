{
  "version": 3,
  "sources": ["../src/afova.ts"],
  "sourcesContent": ["import { nanoid } from \"nanoid\";\nimport constraint_violation_messages_en from \"./locale/en.json\";\nimport constraint_violation_messages_de from \"./locale/de.json\";\n\nexport interface AfovaSettings {\n  selector?: string;\n  validateOnChange?: boolean;\n  focusOnFirstError?: boolean;\n}\n\nconst INPUT_TYPES = [\n  \"text\",\n  \"email\",\n  \"datetime-local\",\n  \"file\",\n  \"image\",\n  \"month\",\n  \"number\",\n  \"password\",\n  \"range\",\n  \"search\",\n  \"tel\",\n  \"time\",\n  \"url\",\n  \"week\",\n] as const;\n\nconst CONSTRAINTS = [\n  \"required\",\n  \"pattern\",\n  \"max\",\n  \"min\",\n  \"step\",\n  \"maxlength\",\n  \"minlength\",\n  \"type\",\n] as const;\n\nconst CONSTRAINT_VIOLATIONS = [\n  \"badInput\",\n  \"customError\",\n  \"patternMismatch\",\n  \"rangeOverflow\",\n  \"rangeUnderflow\",\n  \"stepMismatch\",\n  \"tooLong\",\n  \"tooShort\",\n  \"typeMismatch\",\n  \"valueMissing\",\n] as const;\n\nexport type InputType = (typeof INPUT_TYPES)[number];\n\nexport type Constraint = (typeof CONSTRAINTS)[number];\n\nexport type ConstraintViolation = (typeof CONSTRAINT_VIOLATIONS)[number];\n\nexport interface ConstraintViolationMessage extends Record<InputType, string> {\n  message: string;\n  constraint?: Constraint;\n}\n\nexport type AfovaConstraintViolationMessages = Record<\n  ConstraintViolation,\n  ConstraintViolationMessage\n>;\n\nexport interface AfovaI18NConstraintViolationMessages {\n  [key: string]: AfovaConstraintViolationMessages;\n}\n\nexport interface AfovaObject {\n  clear: () => void;\n  isInvalid: () => boolean;\n  validate: () => void;\n}\n\nconst DEFAULT_SETTINGS: AfovaSettings = {\n  selector: \"form\",\n  validateOnChange: false,\n  focusOnFirstError: true,\n};\n\nconst I18N_CONSTRAINTS: AfovaI18NConstraintViolationMessages = {\n  en: constraint_violation_messages_en as unknown as AfovaConstraintViolationMessages,\n  de: constraint_violation_messages_de as unknown as AfovaConstraintViolationMessages,\n};\n\nconst IGNORE_CONTROL_TYPES = [\"submit\", \"reset\", \"button\"];\n\nfunction getConstraints(): AfovaConstraintViolationMessages {\n  let locale = navigator.language;\n  let constraints = I18N_CONSTRAINTS[locale];\n  if (constraints) {\n    console.log(`afova is using locale=[${locale}]`);\n    return constraints;\n  }\n\n  //extract language\n  const idx = locale.indexOf(\"-\");\n  if (idx) {\n    locale = locale.substring(0, idx);\n    if (locale) {\n      constraints = I18N_CONSTRAINTS[locale];\n    }\n  }\n\n  if (constraints) {\n    console.log(`afova is using language=[${locale}]`);\n    return constraints;\n  } else {\n    console.log(`afova is using language=[en]`);\n    return I18N_CONSTRAINTS.en;\n  }\n}\n\n/**\n * Create an afova object and initialize it for forms that are identified by the selector given in the options.\n * Will register event listeners on the form and the input controls of the form.\n * @param options settings for afova, optional\n */\nexport function afova(options?: AfovaSettings): AfovaObject {\n  let constraintViolationMessages: AfovaConstraintViolationMessages =\n    getConstraints();\n\n  function _ensureId(element: Element): void {\n    if (!element.id) {\n      element.id = `afova-${nanoid()}`;\n    }\n  }\n\n  function _findMessageContainer(control: HTMLObjectElement): Element | null {\n    const messageContainer = document.querySelector(\n      `#${control.id}-afova-message-container`,\n    );\n    return messageContainer;\n  }\n\n  function _ensureAndGetMessageContainer(control: HTMLObjectElement): Element {\n    let messageContainer = _findMessageContainer(control);\n    if (!messageContainer) {\n      messageContainer = document.createElement(\"ul\");\n      control.parentNode?.insertBefore(messageContainer, control);\n      messageContainer.id = `${control.id}-afova-message-container`;\n      messageContainer.classList.add(\"afova-message-container\");\n      control.setAttribute(\"aria-errormessage\", messageContainer.id);\n    }\n\n    return messageContainer;\n  }\n\n  function _deriveMessageText(\n    violation: ConstraintViolation,\n    control: HTMLObjectElement,\n  ): string {\n    if (violation != \"customError\") {\n      let defaultMessage = constraintViolationMessages[violation];\n\n      if (defaultMessage) {\n        let constraint = defaultMessage.constraint;\n\n        let message =\n          //a message defined for the control has highest prio\n          control.dataset[constraint || violation] ||\n          //a default message specific for the input type has second hightest prio\n          constraintViolationMessages[violation][control.type as InputType] ||\n          //a default message has last prio\n          defaultMessage.message;\n\n        const constraintValue = control.getAttribute(constraint || \"\");\n        if (constraintValue) {\n          const regex = new RegExp(`\\{\\{\\\\s*constraint\\\\s*\\}\\}`, \"ig\");\n          message = message.replace(regex, constraintValue);\n        }\n\n        return message;\n      }\n    }\n    return control.validationMessage;\n  }\n\n  function _putMessage(control: HTMLObjectElement): void {\n    const messageContainer = _ensureAndGetMessageContainer(control);\n\n    const validity = control.validity;\n    const messageElement = document.createElement(\"li\");\n    messageElement.classList.add(\"afova-message\");\n    messageContainer.appendChild(messageElement);\n\n    for (const violation of CONSTRAINT_VIOLATIONS) {\n      if ((validity as any)[violation]) {\n        //there is an error of type constraint\n        let message = _deriveMessageText(\n          violation as ConstraintViolation,\n          control,\n        );\n        if (message) {\n          messageElement.innerHTML = message;\n        }\n        break;\n      }\n    }\n\n    if (!messageElement.innerHTML) {\n      messageElement.innerHTML =\n        control.dataset.errorInvalid ||\n        constraintViolationMessages.badInput.message;\n    }\n  }\n\n  function _clearControlMessages(control: HTMLObjectElement): void {\n    control.removeAttribute(\"aria-invalid\");\n    control.removeAttribute(\"aria-errormessage\");\n\n    const messageContainer = _findMessageContainer(control);\n    if (messageContainer) {\n      messageContainer.remove();\n    }\n\n    let context = _getContext(control);\n    if (context) {\n      context.classList.remove(\"afova-active\");\n    }\n  }\n\n  function _setControlMessage(\n    control: HTMLObjectElement,\n    focus?: boolean,\n  ): void {\n    const context = _getContext(control);\n    if (context) {\n      context.classList.add(\"afova-active\");\n    }\n    control.setAttribute(\"aria-invalid\", \"true\");\n\n    _putMessage(control);\n\n    if (focus) {\n      control.focus();\n    }\n  }\n\n  function _validateControl(\n    control: HTMLObjectElement,\n    focus?: boolean,\n  ): boolean {\n    _clearControlMessages(control);\n    if (!control.validity.valid) {\n      _setControlMessage(control, focus);\n    }\n    return control.validity.valid;\n  }\n\n  function _getFormElements(form: HTMLFormElement): HTMLObjectElement[] {\n    const result: HTMLObjectElement[] = [];\n    for (const control of form.elements) {\n      if (!IGNORE_CONTROL_TYPES.includes((control as HTMLObjectElement).type)) {\n        result.push(control as HTMLObjectElement);\n      }\n    }\n    return result;\n  }\n\n  function _validateForm(form: HTMLFormElement, event?: Event): void {\n    let firstError: HTMLObjectElement | undefined;\n    for (const control of _getFormElements(form)) {\n      const valid = _validateControl(control);\n      if (!firstError && !valid) {\n        firstError = control;\n      }\n    }\n    if (firstError) {\n      event?.preventDefault();\n      if (settings.focusOnFirstError) {\n        firstError.focus();\n      }\n    }\n  }\n\n  function _resetForm(form: HTMLFormElement): void {\n    for (let control of _getFormElements(form)) {\n      _clearControlMessages(control);\n    }\n  }\n\n  function _prepareForms(): void {\n    const forms = document.querySelectorAll(settings.selector || \"form\");\n    for (const form of forms) {\n      //switch off default browser form validation\n      form.setAttribute(\"novalidate\", \"\");\n\n      _ensureId(form);\n\n      form.addEventListener(\"submit\", _formSubmitListener);\n      form.addEventListener(\"reset\", _formResetListener);\n      for (const control of _getFormElements(form as HTMLFormElement)) {\n        _prepareControl(control);\n      }\n    }\n  }\n\n  function _formSubmitListener(event: Event): void {\n    _validateForm(event.target as HTMLFormElement, event);\n  }\n\n  function _formResetListener(event: Event): void {\n    _resetForm(event.target as HTMLFormElement);\n  }\n\n  function _unprepareForms(): void {\n    const forms = document.querySelectorAll(settings.selector || \"form\");\n    for (const form of forms) {\n      form.removeAttribute(\"novalidate\");\n      form.removeEventListener(\"submit\", _formSubmitListener);\n      form.removeEventListener(\"reset\", _formResetListener);\n\n      for (const control of _getFormElements(form as HTMLFormElement)) {\n        _unprepareControl(control);\n      }\n    }\n  }\n\n  function _prepareControl(control: HTMLObjectElement): void {\n    _ensureId(control);\n    _getContext(control);\n    control.classList.add(\"afova-control\");\n    if (settings.validateOnChange) {\n      control.addEventListener(\"change\", _controlChangeListener);\n    }\n  }\n\n  function _controlChangeListener(event: Event): void {\n    _validateControl(event.target as HTMLObjectElement, true);\n  }\n\n  function _unprepareControl(control: HTMLObjectElement): void {\n    control.classList.remove(\"afova-control\");\n    control.removeEventListener(\"change\", _controlChangeListener);\n  }\n\n  /**\n   * Find the wrapping afova context for a form control by searching the parents.\n   * The context must be a label or a container with tje CSS class afova-context assigned.\n   * @param control the form control to start from\n   * @returns the wrapping context or null\n   */\n  function _getContext(control: HTMLElement): Element | null {\n    let context = control.closest(\".afova-context\");\n\n    if (!context) {\n      context = control.closest(\"label\");\n    }\n\n    if (context) {\n      context.classList.add(\"afova-context\");\n      if (\n        context.tagName == \"LABEL\" &&\n        !(context as HTMLLabelElement).htmlFor\n      ) {\n        (context as HTMLLabelElement).htmlFor = control.id;\n      }\n    }\n\n    return context;\n  }\n\n  function _validate(): void {\n    const forms = document.querySelectorAll(settings.selector || \"form\");\n    for (const form of forms) {\n      _validateForm(form as HTMLFormElement);\n    }\n  }\n\n  function _isInvalid(): boolean {\n    const forms = document.querySelectorAll(settings.selector || \"form\");\n    for (const form of forms) {\n      if (!(form as HTMLFormElement).checkValidity()) {\n        //form has invalid controls\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  let settings = Object.assign({}, DEFAULT_SETTINGS, options);\n  _prepareForms();\n\n  return {\n    /**\n     * Will remove all event listeners that have been added by afova and\n     * will clear all afova messages.\n     */\n    clear: () => _unprepareForms(),\n\n    /**\n    * Trigger the validation. In most cases not required, as afova will trigger\n     the validation automatically when submitting any of the selected forms.\n    */\n    validate: () => _validate(),\n\n    /**\n     * Verify if any of the forms selected according to the settings object is invalid\n     * @returns true if at least one form is invalid\n     */\n    isInvalid: () => _isInvalid(),\n  };\n}\n"],
  "mappings": "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",
  "names": ["nanoid", "constraint_violation_messages_en", "constraint_violation_messages_de", "INPUT_TYPES", "CONSTRAINTS", "CONSTRAINT_VIOLATIONS", "DEFAULT_SETTINGS", "I18N_CONSTRAINTS", "IGNORE_CONTROL_TYPES", "getConstraints", "locale", "constraints", "idx", "options", "constraintViolationMessages", "_ensureId", "element", "_findMessageContainer", "control", "_ensureAndGetMessageContainer", "messageContainer", "_deriveMessageText", "violation", "defaultMessage", "constraint", "message", "constraintValue", "regex", "_putMessage", "validity", "messageElement", "_clearControlMessages", "context", "_getContext", "_setControlMessage", "focus", "_validateControl", "_getFormElements", "form", "result", "_validateForm", "event", "firstError", "valid", "settings", "_resetForm", "_prepareForms", "forms", "_formSubmitListener", "_formResetListener", "_prepareControl", "_unprepareForms", "_unprepareControl", "_controlChangeListener", "_validate", "_isInvalid"]
}
