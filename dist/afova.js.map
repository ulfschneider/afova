{"version":3,"file":"afova.js","sources":["../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js","../src/afova.ts"],"sourcesContent":["export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << Math.log2(alphabet.length - 1)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","import { nanoid } from \"nanoid\";\nimport constraint_violation_messages_en from \"./locale/en.json\";\nimport constraint_violation_messages_de from \"./locale/de.json\";\n\nexport interface AfovaSettings {\n  selector?: string;\n  validateOnChange?: boolean;\n  focusOnFirstError?: boolean;\n}\n\nconst INPUT_TYPES = [\n  \"text\",\n  \"email\",\n  \"datetime-local\",\n  \"file\",\n  \"image\",\n  \"month\",\n  \"number\",\n  \"password\",\n  \"range\",\n  \"search\",\n  \"tel\",\n  \"time\",\n  \"url\",\n  \"week\",\n] as const;\n\nconst CONSTRAINTS = [\n  \"required\",\n  \"pattern\",\n  \"max\",\n  \"min\",\n  \"step\",\n  \"maxlength\",\n  \"minlength\",\n  \"type\",\n] as const;\n\nconst CONSTRAINT_VIOLATIONS = [\n  \"badInput\",\n  \"customError\",\n  \"patternMismatch\",\n  \"rangeOverflow\",\n  \"rangeUnderflow\",\n  \"stepMismatch\",\n  \"tooLong\",\n  \"tooShort\",\n  \"typeMismatch\",\n  \"valueMissing\",\n] as const;\n\nexport type InputType = (typeof INPUT_TYPES)[number];\n\nexport type Constraint = (typeof CONSTRAINTS)[number];\n\nexport type ConstraintViolation = (typeof CONSTRAINT_VIOLATIONS)[number];\n\nexport interface ConstraintViolationMessage extends Record<InputType, string> {\n  message: string;\n  constraint?: Constraint;\n}\n\nexport type AfovaConstraintViolationMessages = Record<\n  ConstraintViolation,\n  ConstraintViolationMessage\n>;\n\nexport interface AfovaI18NConstraintViolationMessages {\n  [key: string]: AfovaConstraintViolationMessages;\n}\n\nexport interface AfovaObject {\n  clear: () => void;\n  isInvalid: () => boolean;\n  validate: () => void;\n}\n\nconst DEFAULT_SETTINGS: AfovaSettings = {\n  selector: \"form\",\n  validateOnChange: false,\n  focusOnFirstError: true,\n};\n\nconst I18N_CONSTRAINTS: AfovaI18NConstraintViolationMessages = {\n  en: constraint_violation_messages_en as unknown as AfovaConstraintViolationMessages,\n  de: constraint_violation_messages_de as unknown as AfovaConstraintViolationMessages,\n};\n\nconst IGNORE_CONTROL_TYPES = [\"submit\", \"reset\", \"button\"];\n\nfunction getConstraints(): AfovaConstraintViolationMessages {\n  let locale = navigator.language;\n  let constraints = I18N_CONSTRAINTS[locale];\n  if (constraints) {\n    console.log(`afova is using locale=[${locale}]`);\n    return constraints;\n  }\n\n  //extract language\n  const idx = locale.indexOf(\"-\");\n  if (idx) {\n    locale = locale.substring(0, idx);\n    if (locale) {\n      constraints = I18N_CONSTRAINTS[locale];\n    }\n  }\n\n  if (constraints) {\n    console.log(`afova is using language=[${locale}]`);\n    return constraints;\n  } else {\n    console.log(`afova is using language=[en]`);\n    return I18N_CONSTRAINTS.en;\n  }\n}\n\n/**\n * Create an afova object and initialize it for forms that are identified by the selector given in the options.\n * Will register event listeners on the form and the input controls of the form.\n * @param options settings for afova, optional\n */\nexport function afova(options?: AfovaSettings): AfovaObject {\n  let constraintViolationMessages: AfovaConstraintViolationMessages =\n    getConstraints();\n\n  function _ensureId(element: Element): void {\n    if (!element.id) {\n      element.id = `afova-${nanoid()}`;\n    }\n  }\n\n  function _findMessageContainer(control: HTMLObjectElement): Element | null {\n    const messageContainer = document.querySelector(\n      `#${control.id}-afova-message-container`,\n    );\n    return messageContainer;\n  }\n\n  function _ensureAndGetMessageContainer(control: HTMLObjectElement): Element {\n    let messageContainer = _findMessageContainer(control);\n    if (!messageContainer) {\n      messageContainer = document.createElement(\"ul\");\n      control.parentNode?.insertBefore(messageContainer, control);\n      messageContainer.id = `${control.id}-afova-message-container`;\n      messageContainer.classList.add(\"afova-message-container\");\n      control.setAttribute(\"aria-errormessage\", messageContainer.id);\n    }\n\n    return messageContainer;\n  }\n\n  function _deriveMessageText(\n    violation: ConstraintViolation,\n    control: HTMLObjectElement,\n  ): string {\n    if (violation != \"customError\") {\n      let defaultMessage = constraintViolationMessages[violation];\n\n      if (defaultMessage) {\n        let constraint = defaultMessage.constraint;\n\n        let message =\n          //a message defined for the control has highest prio\n          control.dataset[constraint || violation] ||\n          //a default message specific for the input type has second hightest prio\n          constraintViolationMessages[violation][control.type as InputType] ||\n          //a default message has last prio\n          defaultMessage.message;\n\n        const constraintValue = control.getAttribute(constraint || \"\");\n        if (constraintValue) {\n          const regex = new RegExp(`\\{\\{\\\\s*constraint\\\\s*\\}\\}`, \"ig\");\n          message = message.replace(regex, constraintValue);\n        }\n\n        return message;\n      }\n    }\n    return control.validationMessage;\n  }\n\n  function _putMessage(control: HTMLObjectElement): void {\n    const messageContainer = _ensureAndGetMessageContainer(control);\n\n    const validity = control.validity;\n    const messageElement = document.createElement(\"li\");\n    messageElement.classList.add(\"afova-message\");\n    messageElement.classList.add(\"afova-derived\");\n    messageContainer.appendChild(messageElement);\n\n    for (const violation of CONSTRAINT_VIOLATIONS) {\n      if ((validity as any)[violation]) {\n        //there is an error of type constraint\n        let message = _deriveMessageText(\n          violation as ConstraintViolation,\n          control,\n        );\n        if (message) {\n          messageElement.innerHTML = message;\n        }\n        break;\n      }\n    }\n\n    if (!messageElement.innerHTML) {\n      messageElement.innerHTML =\n        control.dataset.errorInvalid ||\n        constraintViolationMessages.badInput.message;\n    }\n  }\n\n  function _clearControlMessages(control: HTMLObjectElement): void {\n    control.classList.remove(\"afova-active\");\n    control.removeAttribute(\"aria-invalid\");\n    control.removeAttribute(\"aria-errormessage\");\n\n    const messageContainer = _findMessageContainer(control);\n    if (messageContainer) {\n      messageContainer.remove();\n    }\n\n    let context = _getContext(control);\n    if (context) {\n      context.classList.remove(\"afova-active\");\n    }\n  }\n\n  function _setControlMessage(\n    control: HTMLObjectElement,\n    focus?: boolean,\n  ): void {\n    const context = _getContext(control);\n    if (context) {\n      context.classList.add(\"afova-active\");\n    }\n    control.classList.add(\"afova-active\");\n    control.setAttribute(\"aria-invalid\", \"true\");\n\n    _putMessage(control);\n\n    if (focus) {\n      control.focus();\n    }\n  }\n\n  function _validateControl(\n    control: HTMLObjectElement,\n    focus?: boolean,\n  ): boolean {\n    _clearControlMessages(control);\n    if (!control.validity.valid) {\n      _setControlMessage(control, focus);\n    }\n    return control.validity.valid;\n  }\n\n  function _getFormElements(form: HTMLFormElement): HTMLObjectElement[] {\n    const result: HTMLObjectElement[] = [];\n    for (const control of form.elements) {\n      if (!IGNORE_CONTROL_TYPES.includes((control as HTMLObjectElement).type)) {\n        result.push(control as HTMLObjectElement);\n      }\n    }\n    return result;\n  }\n\n  function _validateForm(form: HTMLFormElement, event?: Event): void {\n    let firstError: HTMLObjectElement | undefined;\n    for (const control of _getFormElements(form)) {\n      const valid = _validateControl(control);\n      if (!firstError && !valid) {\n        firstError = control;\n      }\n    }\n    if (firstError) {\n      event?.preventDefault();\n      if (settings.focusOnFirstError) {\n        firstError.focus();\n      }\n    }\n  }\n\n  function _resetForm(form: HTMLFormElement): void {\n    for (let control of _getFormElements(form)) {\n      _clearControlMessages(control);\n    }\n  }\n\n  function _prepareForms(): void {\n    const forms = document.querySelectorAll(settings.selector || \"form\");\n    for (const form of forms) {\n      //switch off default browser form validation\n      form.setAttribute(\"novalidate\", \"\");\n\n      _ensureId(form);\n\n      form.addEventListener(\"submit\", _formSubmitListener);\n      form.addEventListener(\"reset\", _formResetListener);\n      for (const control of _getFormElements(form as HTMLFormElement)) {\n        _prepareControl(control);\n      }\n    }\n  }\n\n  function _formSubmitListener(event: Event): void {\n    _validateForm(event.target as HTMLFormElement, event);\n  }\n\n  function _formResetListener(event: Event): void {\n    _resetForm(event.target as HTMLFormElement);\n  }\n\n  function _unprepareForms(): void {\n    const forms = document.querySelectorAll(settings.selector || \"form\");\n    for (const form of forms) {\n      form.removeAttribute(\"novalidate\");\n      form.removeEventListener(\"submit\", _formSubmitListener);\n      form.removeEventListener(\"reset\", _formResetListener);\n\n      for (const control of _getFormElements(form as HTMLFormElement)) {\n        _unprepareControl(control);\n      }\n    }\n  }\n\n  function _prepareControl(control: HTMLObjectElement): void {\n    _ensureId(control);\n    control.classList.add(\"afova-control\");\n    if (settings.validateOnChange) {\n      control.addEventListener(\"change\", _controlChangeListener);\n    }\n  }\n\n  function _controlChangeListener(event: Event): void {\n    _validateControl(event.target as HTMLObjectElement, true);\n  }\n\n  function _unprepareControl(control: HTMLObjectElement): void {\n    control.classList.remove(\"afova-control\");\n    control.removeEventListener(\"change\", _controlChangeListener);\n  }\n\n  /**\n   * Find the wrapping afova context for a form control by searching the parents.\n   * The context must be a label or a container with CSS class afova-context assigned\n   * @param control the form control to start from\n   * @returns the wrapping context or null\n   */\n  function _getContext(control: HTMLElement): Element | null {\n    let context = control.closest(\".afova-context\");\n\n    if (!context) {\n      context = control.closest(\"label\");\n      if (context) {\n        context.classList.add(\"afova-context\");\n        if (!(context as HTMLLabelElement).htmlFor) {\n          (context as HTMLLabelElement).htmlFor = control.id;\n        }\n      }\n    }\n\n    return context;\n  }\n\n  function _validate(): void {\n    const forms = document.querySelectorAll(settings.selector || \"form\");\n    for (const form of forms) {\n      _validateForm(form as HTMLFormElement);\n    }\n  }\n\n  function _isInvalid(): boolean {\n    const forms = document.querySelectorAll(settings.selector || \"form\");\n    for (const form of forms) {\n      if (!(form as HTMLFormElement).checkValidity()) {\n        //form has invalid controls\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  let settings = Object.assign({}, DEFAULT_SETTINGS, options);\n  _prepareForms();\n\n  return {\n    /**\n     * Will remove all event listeners that have been added by afova and\n     * will clear all afova messages.\n     */\n    clear: () => _unprepareForms(),\n\n    /**\n    * Trigger the validation. In most cases not required, as afova will trigger\n     the validation automatically when submitting any of the selected forms.\n    */\n    validate: () => _validate(),\n\n    /**\n     * Verify if any of the forms selected according to the settings object is invalid\n     * @returns true if at least one form is invalid\n     */\n    isInvalid: () => _isInvalid(),\n  };\n}\n"],"names":["scopedUrlAlphabet"],"mappings":"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","x_google_ignoreList":[0,1]}